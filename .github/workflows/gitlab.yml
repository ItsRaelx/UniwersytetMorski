name: GitLab Sync CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      GITLAB_HOST: 'gitlab.raidvm.com'
      GROUP_PATH: 'UMG'

    steps:
      - uses: actions/checkout@v4

      - name: Install GitLab API client
        run: pip install python-gitlab

      - name: Clean workspace (preserving .github and README.md)
        run: |
          # Create temp dir for .github and README.md
          mkdir -p temp_preserve
          [ -d .github ] && cp -r .github temp_preserve/
          [ -f README.md ] && cp README.md temp_preserve/
          
          # Clean everything except temp_preserve
          find . -mindepth 1 ! -path './temp_preserve*' ! -path './.git*' -exec rm -rf {} +
          
          # Restore preserved files
          [ -d temp_preserve/.github ] && cp -r temp_preserve/.github .
          [ -f temp_preserve/README.md ] && cp temp_preserve/README.md .
          rm -rf temp_preserve
          rm -f .gitmodules || true

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Sync GitLab structure
        run: |
          python3 << 'EOF'
          import gitlab
          import os
          import shutil
          
          gl = gitlab.Gitlab(f'https://{os.environ["GITLAB_HOST"]}')
          
          def get_valid_paths(group, base_path='', valid_paths=None):
              if valid_paths is None:
                  valid_paths = set()
              
              current_path = base_path if group.path == os.environ["GROUP_PATH"] else os.path.join(base_path, group.path)
              if current_path:
                  valid_paths.add(current_path)
              
              for project in group.projects.list(all=True):
                  project_path = os.path.join(current_path, project.path)
                  valid_paths.add(project_path)
              
              for subgroup in group.subgroups.list(all=True):
                  subgroup_obj = gl.groups.get(subgroup.id)
                  get_valid_paths(subgroup_obj, current_path, valid_paths)
              
              return valid_paths
          
          def process_group(group, base_path=''):
              if group.path != os.environ["GROUP_PATH"]:
                  group_path = os.path.join(base_path, group.path)
                  os.makedirs(group_path, exist_ok=True)
                  print(f"Creating directory: {group_path}")
              else:
                  group_path = base_path
              
              for project in group.projects.list(all=True):
                  print(f"Cloning {project.path_with_namespace}")
                  project_path = os.path.join(group_path, project.path)
                  if os.path.exists(project_path):
                      shutil.rmtree(project_path)
                  clone_result = os.system(f'git clone https://{os.environ["GITLAB_HOST"]}/{project.path_with_namespace}.git {project_path}')
                  if clone_result == 0:
                      git_dir = os.path.join(project_path, '.git')
                      if os.path.exists(git_dir):
                          shutil.rmtree(git_dir)
              
              for subgroup in group.subgroups.list(all=True):
                  subgroup_obj = gl.groups.get(subgroup.id)
                  process_group(subgroup_obj, group_path)
          
          root_group = gl.groups.get(os.environ["GROUP_PATH"])
          
          valid_paths = get_valid_paths(root_group, '.')
          
          for root, dirs, files in os.walk('.', topdown=False):
              if root == '.' or root == './.github':
                  continue
              if root.startswith('./.git'):  # Skip git directories
                  continue
              if root[2:] not in valid_paths and root != './.github':  # Remove './' from the start
                  if os.path.exists(root):  # Check if path still exists
                      print(f"Checking path: {root}")
                      if root != './README.md':  # Skip README.md
                          print(f"Removing non-existent path: {root}")
                          if os.path.isdir(root):
                              shutil.rmtree(root)
                          else:
                              os.remove(root)
          
          process_group(root_group, '.')
          EOF

      - name: Remove .gitmodules if exists
        run: rm -f .gitmodules || true

      - name: Commit and Push changes
        run: |
          git add -A
          git commit -m "Update GitLab sync $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push
